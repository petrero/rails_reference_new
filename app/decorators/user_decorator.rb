class UserDecorator < ApplicationDecorator
  decorates :user

  def avatar
    site_link h.image_tag("avatars/#{avatar_name}", class: "avatar")
  end
  
  def linked_name
    site_link(model.full_name.present? ? model.full_name : model.username)
  end
  
  def website
    if model.url.present?
      h.link_to model.url, model.url
    else 
      #'<span class="none">None given</span>'
      h.content_tag :span, "None given", class: "none"
    end
  end
  
  
  def twitter
    if model.twitter_name.present?
      h.link_to model.twitter_name, "http://twitter.com/#{model.twitter_name}"
    else
      #<span class="none">None given</span>
      h.content_tag :span, "None given", class: "none"
    end 
  end
  
  def bio
    if model.bio.present?
      Redcarpet::Markdown.new(Redcarpet::Render::HTML, :hard_wrap => true, :filter_html => true, :autolink => true).render(model.bio).html_safe
    else
      #'<span class="none">None given</span>'
      h.content_tag :span, "None given", class: "none"
    end
  end
  
  private
  def site_link(content)
    h.link_to_if model.url.present?, content, model.url
  end
  
  def avatar_name
     if model.avatar_image_name.present?
      model.avatar_image_name
    else
      "default.png"
    end
  end
  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end
end
